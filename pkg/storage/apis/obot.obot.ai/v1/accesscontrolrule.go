package v1

import (
	"slices"

	"github.com/obot-platform/nah/pkg/fields"
	"github.com/obot-platform/obot/apiclient/types"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var (
	_ fields.Fields = (*AccessControlRule)(nil)
	_ DeleteRefs    = (*AccessControlRule)(nil)
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type AccessControlRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec AccessControlRuleSpec `json:"spec,omitempty"`
}

type AccessControlRuleSpec struct {
	MCPCatalogID string                          `json:"mcpCatalogID,omitempty"`
	Manifest     types.AccessControlRuleManifest `json:"manifest"`
	// PowerUserWorkspaceID contains the name of the PowerUserWorkspace that owns this access control rule, if there is one.
	PowerUserWorkspaceID string `json:"powerUserWorkspaceID,omitempty"`
	// Generated indicates that this access control rule was automatically generated by the system and should not be modified by users.
	Generated bool `json:"generated,omitempty"`
}

func (in *AccessControlRule) GetColumns() [][]string {
	return [][]string{
		{"Name", "Name"},
		{"Display Name", "Spec.Manifest.DisplayName"},
		{"Catalog", "Spec.MCPCatalogID"},
		{"Subjects", "{{len .Spec.Manifest.Subjects}}"},
		{"Resources", "{{len .Spec.Manifest.Resources}}"},
	}
}

func (in *AccessControlRule) Has(field string) (exists bool) {
	return slices.Contains(in.FieldNames(), field)
}

func (in *AccessControlRule) Get(field string) (value string) {
	switch field {
	case "spec.mcpCatalogID":
		return in.Spec.MCPCatalogID
	case "spec.powerUserWorkspaceID":
		return in.Spec.PowerUserWorkspaceID
	}
	return ""
}

func (in *AccessControlRule) FieldNames() []string {
	return []string{
		"spec.mcpCatalogID",
		"spec.powerUserWorkspaceID",
	}
}

func (in *AccessControlRule) DeleteRefs() []Ref {
	return []Ref{
		{ObjType: &PowerUserWorkspace{}, Name: in.Spec.PowerUserWorkspaceID},
	}
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type AccessControlRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`

	Items []AccessControlRule `json:"items"`
}
