# replicaCount -- The number of Obot server instances to run
replicaCount: 1

image:
  # image.repository -- The name of the docker repository for Obot. `ghcr.io/obot-platform/obot` for open-source or `ghcr.io/obot-platform/obot-enterprise` for enterprise.
  # Please note that for enterprise you will need to set an `imagePullSecret`
  repository: ghcr.io/obot-platform/obot-enterprise
  # image.tag -- The docker tag to pull for obot. If blank, will default to the chart appVersion
  tag: ""
  # image.pullPolicy -- Kubernetes image pullPolicy to use for Obot
  pullPolicy: IfNotPresent

# imagePullSecrets -- Configures kubernetes secrets to use for pulling private images
imagePullSecrets: [ ]

# updateStrategy -- Configures what update strategy to use for the deployment (Recreate or RollingUpdate)
updateStrategy: "RollingUpdate"

service:
  # service.type -- Type of Kubernetes service to create
  type: ClusterIP
  # service.port -- Port for the Kubernetes service to expose
  port: 80
  # service.annotations -- Extra annotations to add to service object
  annotations: { }
  # service.spec -- Any extra fields to add to the service object spec
  spec: { }

ingress:
  # ingress.enabled -- Enables ingress creation for Obot.
  enabled: false
  # ingress.annotations -- Configure annotations to add to the ingress object
  annotations: { }
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  # ingress.className -- Configures a preexisting ingress class to use.
  className: ~
  # className: obot
  paths:
    - path: /
      pathType: Prefix
  # ingress.extraPaths -- Define complete path objects, will be inserted before regular paths. Can be useful for things like ALB Ingress Controller actions
  extraPaths: [ ]
  # ingress.hosts -- List of hostnames to configure the ingress with
  hosts: [ ]
  # - chart-example.local
  # ingress.tls -- List of secrets used to configure TLS for the ingress.
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# config - A key/value object containing configuration variables to configure on the obot deployment
config:
  # config.existingSecret -- The name of an existing secret to use for config instead of creating a new one
  existingSecret: ""

  # config.awsAccessKeyID -- An AWS access key with permissions for AWS KMS, used for encryption
  awsAccessKeyID: ""
  # config.awsRegion -- An AWS region, used to access AWS KMS
  awsRegion: ""
  # config.awsAccessKeyID -- An AWS secret access key with permissions for AWS KMS, used for encryption
  awsSecretAccessKey: ""

  # config.gcpKMSKeyURI -- The URI of a Google Cloud KMS key, used for encryption
  gcpKMSKeyURI: ""

  # config.nahThreadiness -- Advanced - sets the number of concurrent threads that can run in the Obot controller
  nahThreadiness: "10000"
  # config.knowledgeFileWorkers -- Advanced - sets the number of workers for knowledge
  knowledgeFileWorkers: "5"

  # config.kinmDBConnections -- Advanced - the number of connections in the database pool for kinm
  kinmDBConnections: "5"

  # config.ignoreInactiveObjects -- whether the controller objects that have been marked as inactive
  ignoreInactiveObjects: false

  # config.githubAuthToken -- A github PAT, used to authenticate tool pulls to avoid github ratelimiting
  githubAuthToken: ""
  # config.obotServerEnableAuthentication -- Enables authentication for Obot
  obotServerEnableAuthentication: true
  # config.obotServerEncryptionProvider -- Configures an encryption provider for credentials in Obot
  obotServerEncryptionProvider: "None" # "None", "AWS", "GCP"
  # config.obotBootstrapToken -- Sets a bootstrap token. If authentication is enabled, one will be autogenerated for you if this is not set.
  obotBootstrapToken: ""
  # config.obotServerAuthAdminEmails -- A comma separated list of email addresses that will have the Admin role in Obot.
  obotServerAuthAdminEmails: ""
  # config.obotServerDSN -- The DSN for your database. For example: postgres://<username>:<password>@<hostname>/<db_name>
  obotServerDSN: ""
  # config.obotServerHostname -- The hostname of your Obot instance, including protocol
  obotServerHostname: ""
  # config.obotWorkspaceProviderType -- Configures the storage backend for workspaces in Obot. Can be 's3' or 'directory'
  obotWorkspaceProviderType: "directory"
  # config.openaiApiKey -- An OpenAI API Key used to configure access to OpenAI models, which are the default in Obot.
  openaiApiKey: ""
  # config.workspaceProviderS3BaseEndpoint -- If config.obotWorkspaceProviderType is 's3' and you are not using AWS S3, this needs to be set to the S3 api endpoint of your provider.
  workspaceProviderS3BaseEndpoint: ""
  # config.workspaceProviderS3Bucket -- The name of the S3 bucket to store workspaces in. Only used if config.obotWorkspaceProviderType is 's3'
  workspaceProviderS3Bucket: ""

# extraEnv -- A map of additional environment variables to set
extraEnv: { }

# resources -- Resource requests and limits to use for Obot
resources: { }

persistence:
  #persistence.enabled -- Enables persistence of workspaces using a PVC when config.obotWorkspaceProviderType is `directory`
  enabled: true
  # persistence.path -- The path the volume will be mounted
  path: /data
  # persistence.storageClass -- Persistent Volume storage class
  # If defined, storageClassName: <storageClass>
  # If set to "-", storageClassName: "", which disables dynamic provisioning
  # If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
  storageClass: ""
  # persistence.accessModes -- Persistent Volume access modes
  accessModes:
    - ReadWriteOnce
  # persistence.size --e Persistent Volume size
  size: 8Gi
  existingClaim: ""

serviceAccount:
  # serviceAccount.create - Specifies whether a service account should be created
  create: false
  # serviceAccount.annotation - Annotations to add to the service account
  annotations: { }
  # serviceAccount.name - The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""